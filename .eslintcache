[{"/Users/kawabatahiroki/Desktop/React/task_app/src/App.js":"1"},{"size":8250,"mtime":1607899729416,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"zste8h","/Users/kawabatahiroki/Desktop/React/task_app/src/App.js",["7","8"],"import React, { Component } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nclass App extends Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      myEvents: [\n        {\n          id: 1,\n          title: \"sample 1\",\n          start: \"2020-12-14 10:00:00\",\n          end: \"2020-12-14 11:00:00\",\n          memo: \"頑張ります！！\",\n          open: false,\n        },\n        {\n          id: 2,\n          title: \"sample 2\",\n          start: \"2020-12-15 10:00:00\",\n          end: \"2020-12-15 11:00:00\",\n          memo: \"頑張ります！！\",\n          open: false,\n        },\n        {\n          id: 3,\n          title: \"sample 3\",\n          start: \"2020-12-16 10:00:00\",\n          end: \"2020-12-16 11:00:00\",\n          memo: \"頑張ります！！\",\n          open: false,\n        }\n      ]\n    }\n    this.doChange = this.doChange.bind(this)\n    this.doSubmit = this.doSubmit.bind(this)\n    this.doOpen = this.doOpen.bind(this)\n    this.doClose = this.doClose.bind(this)\n    this.doUpdate = this.doUpdate.bind(this)\n    this.doDelete = this.doDelete.bind(this)\n  }\n\n  doChange(e){\n    this.setState({\n      [e.target.name]: e.target.value,\n    })\n  }\n\n  doSubmit(e){\n    e.preventDefault();\n    this.setState({\n      myEvents: [\n        ...this.state.myEvents, \n        {\n          id: this.state.myEvents.length,\n          title: this.state.title, \n          start: this.state.start,\n          end: this.state.end,\n          memo: this.state.memo,\n          open: false,\n        }\n      ],\n      title: \"\",\n      start: \"\",\n      end: \"\",\n      memo: \"\"\n    });\n\n  }\n\n  doChange(e){\n    this.setState({\n      [e.target.name]: e.target.value,\n    })\n  }\n\n  doSubmit(e){\n    e.preventDefault();\n    this.setState({\n      myEvents: [\n        ...this.state.myEvents, \n        {\n          id: this.state.myEvents.length + 1,\n          title: this.state.title, \n          start: this.state.start,\n          end: this.state.end,\n          memo: this.state.memo,\n          open: false,\n        }\n      ],\n      title: \"\",\n      start: \"\",\n      end: \"\",\n      memo: \"\"\n    });\n  }\n\n  doOpen(info){\n    this.selEventID = info.event.id;\n    const selEvent = this.state.myEvents[info.event.id - 1];\n    const title = selEvent.title;\n    const memo = selEvent.memo;\n    const start = new Date(selEvent.start);\n    const starttime = this.changeDateToString(start)\n    const end = new Date(selEvent.end);\n    const endtime = this.changeDateToString(end)\n\n    this.setState({ inputTitle: title });\n    this.setState({ inputMemo: memo });\n    this.setState({ inputStart: starttime });\n    this.setState({ inputEnd: endtime });\n    this.setState({open: true})\n  }\n\n  doClose(){\n    this.setState({\n      open: false,\n    })\n  };\n\n  changeDateToString(dt) {\n    const year = dt.getFullYear();\n    const month = this.getdoubleDigestNumer(dt.getMonth() + 1);\n    const date = this.getdoubleDigestNumer(dt.getDate());\n    const hour = this.getdoubleDigestNumer(dt.getHours());\n    const minutes = this.getdoubleDigestNumer(dt.getMinutes());\n\n    const retDate = `${year}-${month}-${date} ${hour}:${minutes}:00`;\n    return retDate;\n  }\n\n  getdoubleDigestNumer(number) {\n    return (\"0\" + number).slice(-2);\n  }\n\n  doUpdate(){\n    const selEvent = this.state.myEvents[this.selEventID - 1];\n    const myEvents_copy = this.state.myEvents.slice();\n    myEvents_copy[this.selEventID - 1] = {\n      id: selEvent.id,\n      title: this.state.inputTitle,\n      memo: this.state.inputMemo,\n      start: this.state.inputStart,\n      end: this.state.inputEnd,\n      open: false,\n    }\n    this.setState({\n      myEvents: myEvents_copy\n    })    \n    alert(\"予定を変更しました！\");\n    this.doClose();\n  }\n\n  doDelete(){\n    const selEvent = this.state.myEvents[this.selEventID - 1];\n    const myEventsCopy = this.state.myEvents.slice();\n    myEventsCopy[this.selEventID - 1] = {\n      id: selEvent.id,\n      title: this.state.inputTitle,\n      memo: this.state.inputMemo,\n      start: null,\n      end: null,\n      open: false,\n    }\n\n    this.setState({\n      myEvents: myEventsCopy\n    });\n    alert(\"予定を削除しました！\");\n    this.doClose();\n\n  }\n  \n  \n\n  render(){\n\n    console.log(this.state.myEvents)\n\n    return(\n      <div>\n        <h1>タスク管理アプリ</h1>\n        <label>タイトル：</label>\n        <input type=\"text\" name=\"title\" value={this.state.title} onChange={this.doChange}/><br/>\n        <label>開始時間：</label>\n        <input type=\"datetime-local\" name=\"start\" value={this.state.start} onChange={this.doChange}/><br/>\n        <label>終了時間：</label>\n        <input type=\"datetime-local\" name=\"end\" value={this.state.end} onChange={this.doChange}/><br/>\n        <label>　メモ　：</label>\n        <input type=\"text\" name=\"memo\" value={this.state.memo} onChange={this.doChange}/>\n        <button onClick={this.doSubmit}>追加</button>\n        <FullCalendar \n          locale=\"ja\"\n          initialView=\"timeGridWeek\"\n          slotDuration=\"00:30:00\"\n          selectable={true}\n          allDaySlot={false}\n          titleFormat={{\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\",\n          }}\n          header={{\n            left: \"prev,next,today\",\n            center: \"title\",\n            right: \"dayGridMonth,timeGridWeek\",\n          }}\n          businessHours={{\n            daysOfWeek: [1, 2, 3, 4, 5],\n            startTime: \"0:00\",\n            endTime: \"24:00\",\n          }}\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n          ref={this.ref}\n          weekends={true}\n          events={this.state.myEvents} \n          // select={this.handleSelect} \n          eventClick={this.doOpen}\n        />\n        <Dialog\n          open={this.state.open? true : false}\n          onClose={this.doClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n        <DialogTitle id=\"alert-dialog-title\">{\"今日の予定\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            タイトル：{this.state.inputTitle}<br/>\n            開始時間：{this.state.inputStart}<br/>\n            終了時間：{this.state.inputEnd}<br/>\n            メモ：{this.state.inputMemo}<br/>\n            <form>\n                タイトル：<input type=\"text\" name=\"inputTitle\" value={this.state.inputTitle} onChange=\n                {\n                  (e) => {this.setState({ inputTitle: e.target.value });}\n                }\n              /><br/>\n                開始時間：<input type=\"text\" name=\"inputStart\" value={this.state.inputStart} onChange=\n                {\n                  (e) => {this.setState({ inputStart: e.target.value });}\n                }\n              /><br/>\n                終了時間：<input type=\"text\" name=\"inputEnd\" value={this.state.inputEnd} onChange=\n                {\n                  (e) => {this.setState({ inputEnd: e.target.value });}\n                }\n              /><br/>\n                  メモ：<input type=\"text\" name=\"inputMemo\" value={this.state.inputMemo} onChange=\n                {\n                  (e) => {this.setState({ inputMemo: e.target.value });}\n                }\n              /><br/>\n              <input type=\"button\" value=\"変更\" onClick={this.doUpdate} />\n              <input type=\"button\" value=\"削除\" onClick={this.doDelete} />\n            </form>    \n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.doClose} color=\"primary\">\n            閉じる\n          </Button>\n        </DialogActions>\n      </Dialog>\n      </div>\n    );\n  };\n\n}\n\nexport default App;",{"ruleId":"9","severity":1,"message":"10","line":81,"column":3,"nodeType":"11","messageId":"12","endLine":85,"endColumn":4},{"ruleId":"9","severity":1,"message":"13","line":87,"column":3,"nodeType":"11","messageId":"12","endLine":106,"endColumn":4},"no-dupe-class-members","Duplicate name 'doChange'.","MethodDefinition","unexpected","Duplicate name 'doSubmit'."]