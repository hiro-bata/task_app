[{"/Users/kawabatahiroki/Desktop/React/task_app/src/App.js":"1","/Users/kawabatahiroki/Desktop/React/task_app/src/components/Add.js":"2","/Users/kawabatahiroki/Desktop/React/task_app/src/components/Auth.js":"3"},{"size":10838,"mtime":1609053981215,"results":"4","hashOfConfig":"5"},{"size":3217,"mtime":1608849249254,"results":"6","hashOfConfig":"5"},{"size":4518,"mtime":1609053191664,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"zste8h",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kawabatahiroki/Desktop/React/task_app/src/App.js",["16","17","18","19","20"],"import React, { Component } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport firebase from \"firebase\";\nimport Add from \"./components/Add\";\nimport Auth from \"./components/Auth\"\nimport './App.css';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCV5yWlgIbafx7jPDHOFLOUntCFEONXtDo\",\n  authDomain: \"task-6c135.firebaseapp.com\",\n  databaseURL: \"https://task-6c135-default-rtdb.firebaseio.com\",\n  projectId: \"task-6c135\",\n  storageBucket: \"task-6c135.appspot.com\",\n  messagingSenderId: \"653620669950\",\n  appId: \"1:653620669950:web:7d792ff0c41f7e330624af\",\n  measurementId: \"G-Q4LZ6DHEL8\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n\nclass App extends Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      myEvents: [],\n      openAddForm: false\n    }\n    this.doChange = this.doChange.bind(this)\n    this.doAddTask = this.doAddTask.bind(this)\n    this.doOpen = this.doOpen.bind(this)\n    this.doClose = this.doClose.bind(this)\n    this.doUpdate = this.doUpdate.bind(this)\n    this.doDelete = this.doDelete.bind(this)\n    this.doSelect = this.doSelect.bind(this)\n    this.getFireData = this.getFireData.bind(this)\n    this.doAddForm = this.doAddForm.bind(this)\n    this.doAction = this.doAction.bind(this)\n    this.getLastID = this.getLastID.bind(this)\n    this.openAddForm = this.openAddForm.bind(this)\n    this.doCloseOpenAddForm = this.doCloseOpenAddForm.bind(this)\n  }\n\n  doChange(e){\n    this.setState({\n      [e.target.name]: e.target.value,\n    })\n  }\n\n  doAddTask(e){\n    e.preventDefault();\n    this.setState({\n      myEvents: [\n        ...this.state.myEvents, \n        {\n          id: this.state.myEvents.length + 1,\n          title: this.state.title, \n          start: this.state.start,\n          end: this.state.end,\n          memo: this.state.memo,\n          open: false,\n          addForm: false\n        }\n      ],\n      title: \"\",\n      start: \"\",\n      end: \"\",\n      memo: \"\"\n    });\n    alert(\"予定を追加しました！\");\n    this.doClose();\n  }\n\n  doOpen(info){\n    this.selEventID = info.event.id;\n    const selEvent = this.state.myEvents[info.event.id];\n    const title = selEvent.title;\n    const memo = selEvent.memo;\n    const start = new Date(selEvent.start);\n    const starttime = this.changeDateToString(start)\n    const end = new Date(selEvent.end);\n    const endtime = this.changeDateToString(end)\n\n    this.setState({ inputTitle: title });\n    this.setState({ inputMemo: memo });\n    this.setState({ inputStart: starttime });\n    this.setState({ inputEnd: endtime });\n    this.setState({open: true})\n    this.setState({addForm: false})\n  }\n\n  doClose(){\n    this.setState({\n      open: false,\n    })\n  };\n\n  changeDateToString(dt) {\n    const year = dt.getFullYear();\n    const month = this.getdoubleDigestNumer(dt.getMonth() + 1);\n    const date = this.getdoubleDigestNumer(dt.getDate());\n    const hour = this.getdoubleDigestNumer(dt.getHours());\n    const minutes = this.getdoubleDigestNumer(dt.getMinutes());\n\n    const retDate = `${year}-${month}-${date} ${hour}:${minutes}:00`;\n    return retDate;\n  }\n\n  getdoubleDigestNumer(number) {\n    return (\"0\" + number).slice(-2);\n  }\n\n  doUpdate(){\n    const selEvent = this.state.myEvents[this.selEventID];\n    const myEvents_copy = this.state.myEvents.slice();\n    myEvents_copy[this.selEventID] = {\n      id: selEvent.id,\n      title: this.state.inputTitle,\n      memo: this.state.inputMemo,\n      start: this.state.inputStart,\n      end: this.state.inputEnd,\n      open: false,\n      addForm: false\n    }\n\n    const updates = {};\n    updates['/myEvents/'] = myEvents_copy;\n    return firebase.database().ref().update(updates),\n    alert(\"予定を変更しました！\"),\n    this.doClose();    \n  }\n\n  doDelete(){\n    const selEvent = this.state.myEvents[this.selEventID];\n    const myEvents_copy = this.state.myEvents.slice();\n    myEvents_copy[this.selEventID] = {\n      id: \"deleted\",\n      title: \"deleted\",\n      memo: \"deleted\",\n      start: \"deleted\",\n      end: \"deleted\",\n      open: \"deleted\",\n      addForm: \"deleted\"\n    }\n\n    const updates = {};\n    updates['/myEvents/'] = myEvents_copy;\n    return firebase.database().ref().update(updates),\n    alert(\"予定を削除しました！\"),\n    this.doClose();\n\n  }\n\n  doSelect(selectInfo){\n    let start = new Date(selectInfo.start);\n    const starttime = this.changeDateToString(start)\n    let end = new Date(selectInfo.end);\n    const endtime = this.changeDateToString(end)\n    start.setHours(start.getHours());\n    end.setHours(start.getHours());\n\n    this.setState({ inputTitle: \"\" });\n    this.setState({ inputMemo: \"\" });\n    this.setState({ inputStart: starttime });\n    this.setState({ inputEnd: endtime });\n    this.setState({open: true})\n    this.setState({addForm: true})\n  }\n\n  doUpdateForm = () => {\n    return(\n      <div>\n        タスク名：<input type=\"text\" name=\"inputTitle\" value={this.state.inputTitle} onChange=\n                  {\n                    (e) => {this.setState({ inputTitle: e.target.value });}\n                  }\n                /><br/>\n        開始時間：<input type=\"text\" name=\"inputStart\" value={this.state.inputStart} onChange=\n                  {\n                    (e) => {this.setState({ inputStart: e.target.value });}\n                  }\n                /><br/>\n        終了時間：<input type=\"text\" name=\"inputEnd\" value={this.state.inputEnd} onChange=\n                  {\n                    (e) => {this.setState({ inputEnd: e.target.value });}\n                  }\n                /><br/>\n        メモ：<input type=\"text\" name=\"inputMemo\" value={this.state.inputMemo} onChange=\n                  {\n                    (e) => {this.setState({ inputMemo: e.target.value });}\n                  }\n                /><br/>\n                <input type=\"button\" value=\"変更\" onClick={this.doUpdate} />\n                <input type=\"button\" value=\"削除\" onClick={this.doDelete} />\n      </div>\n    );  \n  }\n\n  doAddForm = () => {\n    return(\n      <div>\n        <Add inputStart={this.state.inputStart} inputEnd={this.state.inputEnd} doClose={this.doClose} />\n      </div>\n    );  \n  }\n\n  doAction(e){\n    this.addFireData();\n  }\n\n  getLastID() {\n    let db = firebase.database();\n    let ref = db.ref(\"myEvents/\");\n    let self = this;\n    ref\n      .orderByKey()\n      .limitToLast(1)\n      .on(\"value\", snapshot => {\n        let res = snapshot.val();\n        for (let i in res) {\n          self.setState({\n            lastID: i\n          });\n          return;\n        }\n      });\n  }\n\n  addFireData() {\n    if (this.state.lastID == -1) {\n      return;\n    }\n    let id = this.state.lastID * 1 + 1;\n    let db = firebase.database();\n    let ref = db.ref(\"/myEvents/\" + id);\n    ref.set({\n      id: id,\n      title: this.state.inputTitle,\n      start: this.state.inputStart,\n      end: this.state.inputEnd,\n      memo: this.state.inputMemo,\n      open: false,\n      addForm: false\n    });\n  }\n\n  getFireData() {\n    let db = firebase.database();\n    let ref = db.ref(\"myEvents/\");\n    let self = this;\n    ref\n      .orderByKey()\n      .limitToFirst(10)\n      .on(\"value\", snapshot => {\n        self.setState({\n          myEvents: snapshot.val()\n        });\n      });\n  }\n\n  openAddForm(){\n    this.setState({\n      openAddForm: true\n    })\n  }\n\n  doCloseOpenAddForm(){\n    this.setState({\n      openAddForm: false\n    })\n  }\n\n  \n  render(){\n    \n    if (this.state.myEvents.length == 0) {\n      this.getFireData();\n    }\n\n    return(\n      <div id=\"App\">\n        <h1>Task App</h1>\n        <div>\n          <Auth /><br/>\n          <button onClick={this.openAddForm}>管理人ページ</button>\n        </div>\n        <FullCalendar \n          locale=\"ja\"\n          initialView=\"timeGridWeek\"\n          slotDuration=\"00:30:00\"\n          selectable={true}\n          allDaySlot={false}\n          titleFormat={{\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\",\n          }}\n          header={{\n            left: \"prev,next,today\",\n            center: \"title\",\n            right: \"dayGridMonth,timeGridWeek\",\n          }}\n          businessHours={{\n            daysOfWeek: [1, 2, 3, 4, 5],\n            startTime: \"0:00\",\n            endTime: \"24:00\",\n          }}\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n          ref={this.ref}\n          weekends={true}\n          events={this.state.myEvents} \n          select={this.doSelect} \n          eventClick={this.doOpen}\n        />\n        <Dialog\n          open={this.state.open? true : false}\n          onClose={this.doClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n        <DialogTitle id=\"alert-dialog-title\">{\"今日の予定\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            タスク名：{this.state.inputTitle}<br/>\n            開始時間：{this.state.inputStart}<br/>\n            終了時間：{this.state.inputEnd}<br/>\n            メモ：{this.state.inputMemo}<br/>\n            {localStorage.getItem(\"token\")? \n              <form>\n                {this.state.addForm ?  this.doAddForm() : this.doUpdateForm()}\n              </form>    \n            :\n              \"\"\n            }\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.doClose} color=\"primary\">\n            閉じる\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog\n          open={this.state.openAddForm? true : false}\n          onClose={this.doCloseOpenAddForm}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n        <DialogTitle id=\"alert-dialog-title\">{localStorage.getItem(\"token\")? \"予定追加\" : \"管理人ページ\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {localStorage.getItem(\"token\")? <Add doCloseOpenAddForm={this.doCloseOpenAddForm}/> : \"管理人のみ\"}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.doCloseOpenAddForm} color=\"primary\">\n            閉じる\n          </Button>\n        </DialogActions>\n      </Dialog>\n      </div>\n    );\n  };\n\n}\n\nexport default App;","/Users/kawabatahiroki/Desktop/React/task_app/src/components/Add.js",["21","22"],"import React, { Component } from \"react\";\nimport firebase from \"firebase\";\nimport \"firebase/storage\";\n\nclass Add extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        id: \"\",\n        title: \"\",\n        start: this.props.inputStart,\n        end: this.props.inputEnd,\n        memo: \"\",\n        open: false,\n        addForm: false,\n        lastID: -1,\n        data: []\n      };\n      this.getLastID();\n      this.doChange = this.doChange.bind(this);\n      this.doAction = this.doAction.bind(this);  \n    }\n\n    doChange(e){\n        this.setState({\n          [e.target.name]: e.target.value,\n        })\n      }   \n          \n    doAction(e) {\n      this.addFireData();\n    }\n  \n    getLastID() {\n      let db = firebase.database();\n      let ref = db.ref(\"myEvents/\");\n      let self = this;\n      ref\n        .orderByKey()\n        .limitToLast(1)\n        .on(\"value\", snapshot => {\n          let res = snapshot.val();\n          for (let i in res) {\n            self.setState({\n              lastID: i\n            });\n            return;\n          }\n        });\n    }\n  \n    addFireData() {\n      if (this.state.lastID == -1) {\n        return;\n      }\n      let id = this.state.lastID * 1 + 1;\n      let db = firebase.database();\n      let ref = db.ref(\"/myEvents/\" + id);\n      ref.set({\n        id: id,\n        title: this.state.title,\n        start: this.state.start,\n        end: this.state.end,\n        memo: this.state.memo,\n        open: false,\n        addForm: false\n      });\n      alert(\"予定を追加しました！\");\n      this.props.doClose();  \n    }\n  \n    render() {\n      if (this.state.lastID == -1) {\n        this.getLastID();\n      }\n      \n      console.log(this.state.start)\n      return (\n        <div>\n          <label>タスク名：</label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            onChange={this.doChange}\n            value={this.state.title}\n          /><br/>\n          \n          {this.props.inputStart? \n          <div>\n          <label>開始時間：</label>\n          <input\n            type=\"text\"\n            name=\"start\"\n            value={this.state.start}\n            onChange={this.doChange}\n          /><br/>\n          <label>終了時間：</label>\n          <input\n            type=\"text\"\n            name=\"end\"\n            onChange={this.doChange}\n            value={this.state.end}\n          /><br/>\n          </div>\n          :\n          <div>\n          <label>開始時間：</label>\n          <input\n            type=\"datetime-local\"\n            name=\"start\"\n            value={this.state.start}\n            onChange={this.doChange}\n          /><br/>\n          <label>終了時間：</label>\n          <input\n            type=\"datetime-local\"\n            name=\"end\"\n            onChange={this.doChange}\n            value={this.state.end}\n          /><br/>\n          </div>\n          }\n          <label>　メモ　：</label>\n          <input\n            type=\"text\"\n            name=\"memo\"\n            onChange={this.doChange}\n            value={this.state.memo}\n          /><br/>\n          <button onClick={this.doAction}>追加</button>\n        </div>\n      );\n    }\n}\n  \nexport default Add;","/Users/kawabatahiroki/Desktop/React/task_app/src/components/Auth.js",["23"],{"ruleId":"24","severity":1,"message":"25","line":138,"column":53,"nodeType":"26","messageId":"27","endLine":138,"endColumn":54},{"ruleId":"28","severity":1,"message":"29","line":144,"column":11,"nodeType":"30","messageId":"31","endLine":144,"endColumn":19},{"ruleId":"24","severity":1,"message":"25","line":158,"column":53,"nodeType":"26","messageId":"27","endLine":158,"endColumn":54},{"ruleId":"32","severity":1,"message":"33","line":240,"column":27,"nodeType":"34","messageId":"35","endLine":240,"endColumn":29},{"ruleId":"32","severity":1,"message":"33","line":286,"column":36,"nodeType":"34","messageId":"35","endLine":286,"endColumn":38},{"ruleId":"32","severity":1,"message":"33","line":53,"column":29,"nodeType":"34","messageId":"35","endLine":53,"endColumn":31},{"ruleId":"32","severity":1,"message":"33","line":73,"column":29,"nodeType":"34","messageId":"35","endLine":73,"endColumn":31},{"ruleId":"28","severity":1,"message":"36","line":9,"column":8,"nodeType":"30","messageId":"31","endLine":9,"endColumn":16},"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-unused-vars","'selEvent' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'firebase' is defined but never used."]