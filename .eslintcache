[{"/Users/kawabatahiroki/Desktop/React/task_app/src/App.js":"1","/Users/kawabatahiroki/Desktop/React/task_app/src/components/Auth.js":"2","/Users/kawabatahiroki/Desktop/React/task_app/src/components/Add.js":"3"},{"size":10892,"mtime":1611797739130,"results":"4","hashOfConfig":"5"},{"size":4518,"mtime":1609054375071,"results":"6","hashOfConfig":"5"},{"size":3228,"mtime":1609055168846,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"zste8h",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/kawabatahiroki/Desktop/React/task_app/src/App.js",["16","17","18","19","20"],"/Users/kawabatahiroki/Desktop/React/task_app/src/components/Auth.js",["21"],"import React, { Component } from \"react\";\nimport axios from \"axios\"\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport firebase from \"firebase\";\n\n\n\nclass Auth extends Component{\n    constructor(props){\n        super(props);\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.state = {\n            isSignIn: false,\n            token: null,\n            error: \"\",\n            open: false,\n        }\n        this.openLoginForm = this.openLoginForm.bind(this)\n        this.doClose = this.doClose.bind(this)\n        this.doSignIn = this.doSignIn.bind(this)\n    }\n\n    handleChange(event){\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    handleSubmit(event){\n        this.auth();\n        event.preventDefault();\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState({\n            isLoginView: !this.state.isLoginView\n        })\n    }\n\n    auth = () => {\n        const authData = {\n            email: this.state.email,\n            password: this.state.password,\n            returnSecureToken: true\n        }\n\n        let url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDflCXtUnLygWJjBxh74aKG6nASdQL5_8I\"\n        \n        if(this.state.isSignUp){\n            url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDflCXtUnLygWJjBxh74aKG6nASdQL5_8I\"\n        }\n        axios.post(url, authData)\n            .then(response => {\n                localStorage.setItem(\"token\", response.data.idToken)\n            })\n            .catch(error => {\n                this.setState({error: error.response.data.error.message})\n            })\n        \n    }\n    \n    logout = (e) => {\n        localStorage.removeItem(\"token\")\n        this.setState({\n            token: null,\n            isSignIn: false\n        });\n    }\n\n    openLoginForm(){\n        this.setState({\n            open: true\n        })\n    }\n\n    doClose(){\n        this.setState({\n          open: false,\n        })\n      };    \n\n    doCheckClose(){\n        this.setState({\n          checkOpen: false,\n        })\n      };  \n\n    doSignIn(event){\n        \n        this.auth();\n        event.preventDefault();\n        this.setState({\n            isSignIn: true, \n        });\n        this.doClose();\n    }\n\n    render(){\n\n        return(\n            <div>\n                <button onClick={this.openLoginForm}>管理人ログイン</button>\n                <Dialog\n                    open={this.state.open? true : false}\n                    onClose={this.doClose}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-title\">管理人ログイン</DialogTitle>\n                    <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {localStorage.getItem(\"token\")? \n                            <button onClick={this.logout}>LOGOUT</button>\n                        :\n                            <div>\n                                <form method=\"post\" onSubmit={this.doSignIn}>\n                                <div>\n                                    <label>メールアドレス</label><br/>\n                                    <input type=\"text\" name=\"email\" onChange={this.handleChange} /><br/><br/>\n                                    <label>パスワード</label><br/>\n                                    <input type=\"password\" name=\"password\" onChange={this.handleChange} />\n                                </div>\n                                <div>{this.state.error}</div><br/>\n                                    <button>ログイン</button>\n                                </form><br/>\n                            </div>\n                        }\n                    </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.doClose} color=\"primary\">閉じる</Button>\n                    </DialogActions>\n                </Dialog>\n\n            </div>\n        );\n    };\n\n}\n\nexport default Auth\n\n\n","/Users/kawabatahiroki/Desktop/React/task_app/src/components/Add.js",["22","23"],"import React, { Component } from \"react\";\nimport firebase from \"firebase\";\nimport \"firebase/storage\";\n\nclass Add extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        id: \"\",\n        title: \"\",\n        start: this.props.inputStart,\n        end: this.props.inputEnd,\n        memo: \"\",\n        open: false,\n        addForm: false,\n        lastID: -1,\n        data: []\n      };\n      this.getLastID();\n      this.doChange = this.doChange.bind(this);\n      this.doAction = this.doAction.bind(this);  \n    }\n\n    doChange(e){\n        this.setState({\n          [e.target.name]: e.target.value,\n        })\n      }   \n          \n    doAction(e) {\n      this.addFireData();\n    }\n  \n    getLastID() {\n      let db = firebase.database();\n      let ref = db.ref(\"myEvents/\");\n      let self = this;\n      ref\n        .orderByKey()\n        .limitToLast(1)\n        .on(\"value\", snapshot => {\n          let res = snapshot.val();\n          for (let i in res) {\n            self.setState({\n              lastID: i\n            });\n            return;\n          }\n        });\n    }\n  \n    addFireData() {\n      if (this.state.lastID == -1) {\n        return;\n      }\n      let id = this.state.lastID * 1 + 1;\n      let db = firebase.database();\n      let ref = db.ref(\"/myEvents/\" + id);\n      ref.set({\n        id: id,\n        title: this.state.title,\n        start: this.state.start,\n        end: this.state.end,\n        memo: this.state.memo,\n        open: false,\n        addForm: false\n      });\n      alert(\"予定を追加しました！\");\n      this.props.doCloseOpenAddForm();  \n    }\n  \n    render() {\n      if (this.state.lastID == -1) {\n        this.getLastID();\n      }\n      \n      console.log(this.state.start)\n      return (\n        <div>\n          <label>タスク名：</label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            onChange={this.doChange}\n            value={this.state.title}\n          /><br/>\n          \n          {this.props.inputStart? \n          <div>\n          <label>開始時間：</label>\n          <input\n            type=\"text\"\n            name=\"start\"\n            value={this.state.start}\n            onChange={this.doChange}\n          /><br/>\n          <label>終了時間：</label>\n          <input\n            type=\"text\"\n            name=\"end\"\n            onChange={this.doChange}\n            value={this.state.end}\n          /><br/>\n          </div>\n          :\n          <div>\n          <label>開始時間：</label>\n          <input\n            type=\"datetime-local\"\n            name=\"start\"\n            value={this.state.start}\n            onChange={this.doChange}\n          /><br/>\n          <label>終了時間：</label>\n          <input\n            type=\"datetime-local\"\n            name=\"end\"\n            onChange={this.doChange}\n            value={this.state.end}\n          /><br/>\n          </div>\n          }\n          <label>　メモ　：</label>\n          <input\n            type=\"text\"\n            name=\"memo\"\n            onChange={this.doChange}\n            value={this.state.memo}\n          /><br/>\n          <button onClick={this.doAction}>追加</button>\n        </div>\n      );\n    }\n}\n  \nexport default Add;",{"ruleId":"24","severity":1,"message":"25","line":138,"column":53,"nodeType":"26","messageId":"27","endLine":138,"endColumn":54},{"ruleId":"28","severity":1,"message":"29","line":144,"column":11,"nodeType":"30","messageId":"31","endLine":144,"endColumn":19},{"ruleId":"24","severity":1,"message":"25","line":158,"column":53,"nodeType":"26","messageId":"27","endLine":158,"endColumn":54},{"ruleId":"32","severity":1,"message":"33","line":240,"column":27,"nodeType":"34","messageId":"35","endLine":240,"endColumn":29},{"ruleId":"32","severity":1,"message":"33","line":286,"column":36,"nodeType":"34","messageId":"35","endLine":286,"endColumn":38},{"ruleId":"28","severity":1,"message":"36","line":9,"column":8,"nodeType":"30","messageId":"31","endLine":9,"endColumn":16},{"ruleId":"32","severity":1,"message":"33","line":53,"column":29,"nodeType":"34","messageId":"35","endLine":53,"endColumn":31},{"ruleId":"32","severity":1,"message":"33","line":73,"column":29,"nodeType":"34","messageId":"35","endLine":73,"endColumn":31},"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-unused-vars","'selEvent' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'firebase' is defined but never used."]